import os
import torch
from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import RunnablePassthrough  # NEW: Correct way to chain steps
from langchain_huggingface import HuggingFacePipeline  # FIXED: Correct import
from transformers import pipeline, logging

# Suppress warnings
logging.set_verbosity_error()

# Check if GPU is available
device = 0 if torch.cuda.is_available() else -1  

# Set Hugging Face Model
MODEL_NAME = "gpt2"

# Load Hugging Face pipeline
hf_pipeline = pipeline("text-generation", model=MODEL_NAME, device=device)

# Wrap the pipeline in LangChain's LLM wrapper
llm = HuggingFacePipeline(pipeline=hf_pipeline)

# --------------------- Step 1: Generate Story Idea ---------------------
story_idea_prompt = PromptTemplate.from_template(
    "Create a short story idea where {character} finds a {object} in {place}."
)

story_idea_chain = story_idea_prompt | llm  # UPDATED SYNTAX

# --------------------- Step 2: Expand the Story ---------------------
expand_story_prompt = PromptTemplate.from_template(
    "Expand this story idea into a short paragraph:\n{story_idea}"
)

expand_story_chain = expand_story_prompt | llm  # UPDATED SYNTAX

# --------------------- Step 3: Summarize the Story ---------------------
summary_prompt = PromptTemplate.from_template(
    "Summarize this story in two sentences:\n{full_story}"
)

summary_chain = summary_prompt | llm  # UPDATED SYNTAX

# --------------------- Step 4: Rewrite in a Different Style ---------------------
style_prompt = PromptTemplate.from_template(
    "Rewrite this story summary in a {style} style:\n{summary}"
)

style_chain = style_prompt | llm  # UPDATED SYNTAX

# --------------------- Step 5: Generate a Story Title ---------------------
title_prompt = PromptTemplate.from_template(
    "Generate a catchy title for this story:\n{final_story}"
)

title_chain = title_prompt | llm  # UPDATED SYNTAX

# --------------------- Combine All Chains Properly ---------------------
full_chain = (
    {"story_idea": story_idea_chain}  # Step 1
    | {"full_story": expand_story_chain}  # Step 2
    | {"summary": summary_chain}  # Step 3
    | {"final_story": style_chain}  # Step 4
    | {"title": title_chain}  # Step 5
)

# --------------------- Function to Run the Full Chain ---------------------
def generate_full_story(character, object, place, style="mystery"):
    final_result = full_chain.invoke({
        "character": character,
        "object": object,
        "place": place,
        "style": style
    })
    
    print("\nFinal Output:\n", final_result["title"])

# Example Usage
generate_full_story(character="Alice", object="mysterious key", place="a dark forest", style="horror")
